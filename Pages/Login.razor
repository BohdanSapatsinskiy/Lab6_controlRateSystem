@page "/login"
@using System.Net.Http.Headers
@inject HttpClient Http
@inject NavigationManager Navigation
@using controlRateSystem.Data.Models;
@inject IJSRuntime JS

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="LoginUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Username:</label>
        <InputText @bind-Value="loginModel.UserName" class="form-control" />
    </div>
    <div class="mb-3">
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @(isLoading ? "Logging in..." : "Login")
    </button>

    @if (!string.IsNullOrEmpty(message))
    {
            <div class="mt-3 alert @(isSuccess ? "alert-success" : "alert-danger")">
            @message
            </div>
    }
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isLoading = false;
    private string message = "";
    private bool isSuccess = false;

    private async Task LoginUser()
    {
        isLoading = true;
        message = "";
        isSuccess = false;

        try
        {
            var response = await Http.PostAsJsonAsync("api/account/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadFromJsonAsync<TokenResponse>();
                if (!string.IsNullOrWhiteSpace(token?.Token))
                {
                    // Зберігаємо токен у sessionStorage
                    await JS.InvokeVoidAsync("sessionStorage.setItem", "authToken", token.Token);
                    
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Token);
                    isSuccess = true;
                    message = "Login successful!";
                    Navigation.NavigateTo("/");
                }
                else
                {
                    message = "Login failed: invalid token received.";
                }
            }
            else
            {
                message = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }

        isLoading = false;
    }

    public class TokenResponse
    {
        public string Token { get; set; }
    }
}
