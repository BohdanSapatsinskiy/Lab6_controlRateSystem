@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">controlRateSystemBlazorApp</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Currencies
            </NavLink>
        </div>

        @if (isAuthenticated)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Categories">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Categories
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <a class="nav-link" href="#" @onclick="Logout">
                    <span class="bi bi-box-arrow-right-nav-menu" aria-hidden="true"></span> Logout
                </a>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Login">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Login
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Register">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Register
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private bool isAuthenticated = false;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        isAuthenticated = !string.IsNullOrEmpty(token);
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("sessionStorage.removeItem", "authToken");
        isAuthenticated = false;
        Navigation.NavigateTo("/login", forceLoad: true);
    }
}
